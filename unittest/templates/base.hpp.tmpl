#pragma once
#include "modular.hpp"

using namespace modular::interface;

class params
{};

class extra_params
{};

class base : public modular_base , public params
{
public:
	base () {};

	using P = params;
	using EP = extra_params;

	base (P&& other)
	: params(other)
	{}

	// Keep this virtual to call the proper destructor
	virtual ~base () {};

	virtual void test () const = 0;

	% for key, val in implemented.items():
		static constexpr char ${key}[] = "${val}";
	% endfor
};
% for key in implemented:
constexpr char base::${key}[];
% endfor
